#! /bin/bash

# Generate an XML file for aj-snapshot based on a JSON file listing connections

: <<'END_COMMENT'
AJ-Snapshot XML example

<?xml version="1.0" encoding="utf-8"?>
<aj-snapshot>
<jack>
  <client name="a2j">
    <port name="A-PRO (capture): A-PRO 1">
      <connection port="twosplit_k:midiin" />
    </port>
  </client>
  <client name="twosplit_m">
    <port name="lv2_midi_out_1">
      <connection port="split_helm:lv2_events_in" />
    </port>
    <port name="lv2_midi_out_2">
      <connection port="split_zyn:lv2_events_in" />
    </port>
  </client>
</jack>
</aj-snapshot>
END_COMMENT

# $1: JSON directory
# $2: JSON file to process

[ -z "$2" ] && exit


# Connections are in the second level object named "connect".
# Keys are synthesizer's audio/midi ports
# Values are selectors for the connection points specified as if all JSON
# files from the directory $1 are slurped.

echo '<?xml version="1.0" encoding="utf-8"?>'
echo '<aj-snapshot>'
echo '<jack>'

# Write a clause for a single client/port/connection.
# We'll try to leave off unconnected clients and have
# multiple clauses per client - let's see how this works
# for aj-snapshot

# $1: source port
# $2: destination port

function wrxml {
  client=`echo "$1" | cut -d: -f 1`
  cport=`echo "$1" | cut -d: -f 2-`
  dport="$2"
  echo "<client name=\"$client\">"
  echo "<port name=\"$cport\">"
  echo "<connection port=\"$dport\" />"
  echo "</port>"
  echo "</client>"
}

jq '.[].connect|select(. != null)' "$1/$2" | sed 's/[\{\}\,]//g' | grep -v '^$' | while read kv ; do
  k=`echo '{'"$kv"'}'| jq 'keys[0]' | tr -d '"'`
  v=`echo '{'"$kv"'}'| jq '.[]' | tr -d '"'`
  [ "$v" = "none" ] || {
    hash=`echo "$v" | grep '^#' | wc -l`
    [ "$hash" = "0" ] && {
      va=`echo -n "$v" | sed 's/^@/.[]./g'`
      vv=`jq "$va|select(. != null)"  --slurp $1/*.json | tr -d '"'`
      wrxml "$k" "$vv"
    } || {
      vx=`echo -n "$v" | sed 's/^#//g'`
      wrxml "$k" "$vx"
    }
  }
done

echo '</jack>'
echo '</aj-snapshot>'

