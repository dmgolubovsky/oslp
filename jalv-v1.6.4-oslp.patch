diff --git a/src/jalv_console.c b/src/jalv_console.c
index 7d11714..eac2bd0 100644
--- a/src/jalv_console.c
+++ b/src/jalv_console.c
@@ -46,6 +46,7 @@ print_usage(const char* name, bool error)
 	fprintf(os, "  -t           Print trace messages from plugin\n");
 	fprintf(os, "  -u UUID      UUID for Jack session restoration\n");
 	fprintf(os, "  -x           Exact JACK client name (exit if taken)\n");
+	fprintf(os, "  -o           OSLP mode: write controls and monitors to external files\n");
 	return error ? 1 : 0;
 }
 
@@ -103,6 +104,8 @@ jalv_init(int* argc, char*** argv, JalvOptions* opts)
 			opts->dump = true;
 		} else if ((*argv)[a][1] == 't') {
 			opts->trace = true;
+		} else if ((*argv)[a][1] == 'o') {
+			opts->oslp_mode = true;
 		} else if ((*argv)[a][1] == 'n') {
 			if (++a == *argc) {
 				fprintf(stderr, "Missing argument for -n\n");
@@ -127,9 +130,20 @@ jalv_native_ui_type(void)
 	return NULL;
 }
 
+// In the OSLP mode, settings of controls and monitors are written
+// to external files /tmp/<client>.controls or /tmp/<client>.monitors
+// instead of standard output.
+
 static void
 jalv_print_controls(Jalv* jalv, bool writable, bool readable)
 {
+	char *extfnb = writable ? "controls" : "monitors";
+	FILE *extfl = NULL;
+	if (jalv->opts.oslp_mode) {
+		char extfn[200];
+		snprintf (extfn, 199, "/tmp/%s.%s", jalv->opts.name, extfnb);
+		extfl = fopen (extfn, "w");
+	}
 	for (size_t i = 0; i < jalv->controls.n_controls; ++i) {
 		ControlID* const control = jalv->controls.controls[i];
 		if ((control->is_writable && writable) ||
@@ -138,8 +152,16 @@ jalv_print_controls(Jalv* jalv, bool writable, bool readable)
 			printf("%s = %f\n",
 			       lilv_node_as_string(control->symbol),
 			       port->control);
+			if (extfl != NULL) {
+				fprintf(extfl, "%s = %f\n",
+				       lilv_node_as_string(control->symbol),
+				       port->control);
+			}
 		}
 	}
+	if (jalv->opts.oslp_mode && extfl != NULL) {
+		fclose (extfl);
+	}
 }
 
 static int
diff --git a/src/jalv_gtk.c b/src/jalv_gtk.c
index 71259bd..38e35d9 100644
--- a/src/jalv_gtk.c
+++ b/src/jalv_gtk.c
@@ -101,7 +101,7 @@ jalv_init(int* argc, char*** argv, JalvOptions* opts)
 		  "Print trace messages from plugin", NULL },
 		{ "show-hidden", 's', 0, G_OPTION_ARG_NONE, &opts->show_hidden,
 		  "Show controls for ports with notOnGUI property on generic UI", NULL },
-		{ "no-menu", 'n', 0, G_OPTION_ARG_NONE, &opts->no_menu,
+		{ "no-menu", 'm', 0, G_OPTION_ARG_NONE, &opts->no_menu,
 		  "Do not show Jalv menu on window", NULL },
 		{ "generic-ui", 'g', 0, G_OPTION_ARG_NONE, &opts->generic_ui,
 		  "Use Jalv generic UI and not the plugin UI", NULL},
@@ -154,7 +154,14 @@ on_save_activate(ZIX_UNUSED GtkWidget* widget, void* ptr)
 		"_Cancel", GTK_RESPONSE_CANCEL,
 		"_Save", GTK_RESPONSE_ACCEPT,
 		NULL);
-
+	char dpath[200];
+	char *oslpstate = getenv("OSLP_SAVED_STATE_PATH");
+	if (oslpstate == NULL) {
+		getcwd(dpath, 200);
+	} else {
+		snprintf(dpath, 199, "%s/%s", oslpstate, jalv->opts.name);
+	}
+	gtk_file_chooser_set_filename(GTK_FILE_CHOOSER(dialog), dpath);
 	if (gtk_dialog_run(GTK_DIALOG(dialog)) == GTK_RESPONSE_ACCEPT) {
 		char* path = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(dialog));
 		char* base = g_build_filename(path, "/", NULL);
@@ -200,11 +207,12 @@ set_window_title(Jalv* jalv)
 	const char* plugin = lilv_node_as_string(name);
 	if (jalv->preset) {
 		const char* preset_label = lilv_state_get_label(jalv->preset);
-		char* title = g_strdup_printf("%s - %s", plugin, preset_label);
+		char* title = g_strdup_printf("%s - %s", jalv->opts.name, preset_label);
 		gtk_window_set_title(GTK_WINDOW(jalv->window), title);
 		free(title);
 	} else {
-		gtk_window_set_title(GTK_WINDOW(jalv->window), plugin);
+		char* title = g_strdup_printf("%s", jalv->opts.name);
+		gtk_window_set_title(GTK_WINDOW(jalv->window), title);
 	}
 	lilv_node_free(name);
 }
@@ -1231,6 +1239,7 @@ jalv_open_ui(Jalv* jalv)
 	g_timeout_add(1000 / jalv->ui_update_hz, (GSourceFunc)jalv_update, jalv);
 
 	gtk_window_present(GTK_WINDOW(window));
+	gtk_window_iconify(GTK_WINDOW(window));
 
 	gtk_main();
 	suil_instance_free(jalv->ui_instance);
diff --git a/src/jalv_internal.h b/src/jalv_internal.h
index 4d25109..5210672 100644
--- a/src/jalv_internal.h
+++ b/src/jalv_internal.h
@@ -174,6 +174,7 @@ typedef struct {
 	int      show_ui;           ///< Show non-embedded UI
 	int      print_controls;    ///< Print control changes to stdout
 	int      non_interactive;   ///< Do not listen for commands on stdin
+	int      oslp_mode;         ///< OSLP mode: write controls and monitors to external files
 } JalvOptions;
 
 typedef struct {
